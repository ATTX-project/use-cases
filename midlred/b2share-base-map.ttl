@prefix rr: <http://www.w3.org/ns/r2rml#>.
@prefix rml: <http://semweb.mmlab.be/ns/rml#>.
@prefix ql: <http://semweb.mmlab.be/ns/ql#>.
@prefix ex: <http://example.com/ns#>.
@prefix xsd: <http://www.w3.org/2001/XMLSchema#>.
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>.
@prefix attx: <http://data.hulib.helsinki.fi/attx/> .
@prefix attx-work: <http://data.hulib.helsinki.fi/attx/work#> .
@prefix dct: <http://purl.org/dc/terms/> .
@prefix etsin: <http://etsin.avointiede.fi/> .


<b2share:doi-identifiers>
  rml:logicalSource [
    rml:source "{filename}"  ;
    rml:referenceFormulation ql:JSONPath ;
    rml:iterator "$.hits.hits[*].metadata.DOI"
  ];

  rr:subjectMap [
    rr:template "doi:{@}" ;
    rr:class attx-work:ID ;
  ];

  rr:predicateObjectMap [
      rr:predicate attx-work:value;
      rr:objectMap [
        rml:reference "@" ;
      ]
    ];

  rr:predicateObjectMap [
      rr:predicate attx-work:type;
      rr:objectMap [
        rr:constant "doi"
      ]
    ];
.

<b2share:epic-identifiers>
  rml:logicalSource [
    rml:source "{filename}"  ;
    rml:referenceFormulation ql:JSONPath ;
    rml:iterator "$.hits.hits[*].metadata.ePIC_PID"
  ];

  rr:subjectMap [
    rr:template "handle:{@}" ;
    rr:class attx-work:ID ;
  ];

  rr:predicateObjectMap [
      rr:predicate attx-work:value;
      rr:objectMap [
        rml:reference "@" ;
      ]
    ];

  rr:predicateObjectMap [
      rr:predicate attx-work:type;
      rr:objectMap [
        rr:constant "ePIC_PID"
      ]
    ];
.

<b2share:related>
  rml:logicalSource [
    rml:source "{filename}"  ;
    rml:referenceFormulation ql:JSONPath ;
    rml:iterator "$.hits.hits[*].metadata.related_identifiers[*]"
  ];

  rr:subjectMap [
    rr:template "{scheme}:{identifier}" ;
    rr:class attx-work:ID ;
  ];

  rr:predicateObjectMap [
      rr:predicate attx-work:value;
      rr:objectMap [
        rml:reference "identifier" ;
      ]
    ];

  rr:predicateObjectMap [
      rr:predicate attx-work:scheme;
      rr:objectMap [
        rml:reference "scheme"
      ]
    ];

.

<b2share:creators>
  rml:logicalSource [
    rml:source "{filename}"  ;
    rml:referenceFormulation ql:JSONPath ;
    rml:iterator "$.hits.hits[*].metadata.creators[*]"
  ];

  rr:subjectMap [
    rr:class attx-work:Creator ;
    rr:template "affiliated-creator:{creator_name}" ;

  ];

  rr:predicateObjectMap [
      rr:predicate attx-work:creatorName;
      rr:objectMap [
        rml:reference "creator_name" ;
      ]
    ];

  rr:predicateObjectMap [
      rr:predicate attx-work:affiliation;
      rr:objectMap [
        rr:constant "none" ;
      ]
    ];

  rr:predicateObjectMap [
      rr:predicate attx-work:nameIdentifier;
      rr:objectMap [
        rr:constant "none" ;
      ]
    ];

.

<b2share:contributors>
  rml:logicalSource [
    rml:source "{filename}"  ;
    rml:referenceFormulation ql:JSONPath ;
    rml:iterator "$.hits.hits[*].metadata.contributors[*]"
  ];
  rr:subjectMap [
    rr:template "contributor:{contributor_name}-{contributor_type}" ;
    rr:class attx-work:Contributor ;

  ];

  rr:predicateObjectMap [
      rr:predicate attx-work:contributorName;
      rr:objectMap [
        rml:reference "contributor_name" ;
      ]
    ];
  rr:predicateObjectMap [
      rr:predicate attx-work:contributorType;
      rr:objectMap [
        rml:reference "contributor_type" ;
      ]
    ];

  rr:predicateObjectMap [
      rr:predicate attx-work:nameIdentifier;
      rr:objectMap [
        rr:constant "none" ;
      ]
    ];
.


<b2share:licenses>
  rml:logicalSource [
    rml:source "{filename}"  ;
    rml:referenceFormulation ql:JSONPath ;
    rml:iterator "$.hits.hits[*]"
  ];
  rr:subjectMap [
    rr:template "license:{metadata.license.license}" ;
    rr:class attx-work:License ;
  ];
  rr:predicateObjectMap [
      rr:predicate attx-work:licenseID;
      rr:objectMap [
        rml:reference "metadata.license.license_uri" ;
      ]
    ];
  rr:predicateObjectMap [
      rr:predicate attx-work:title;
      rr:objectMap [
        rml:reference "metadata.license.license" ;
      ]
    ];

.

<b2share:resource-types>
  rml:logicalSource [
    rml:source "{filename}"  ;
    rml:referenceFormulation ql:JSONPath ;
    rml:iterator "$.hits.hits[*].metadata.resource_types[*].resource_type_general"
  ];
  rr:subjectMap [
    rr:template "resource-type:{@}" ;
    rr:class attx-work:ResourceType ;
  ];
  rr:predicateObjectMap [
      rr:predicate attx-work:type;
      rr:objectMap [
        rml:reference "@" ;
      ]
    ];
  rr:predicateObjectMap [
      rr:predicate attx-work:title;
      rr:objectMap [
        rml:reference "@" ;
      ]
    ];
.


<b2share:datasets>
  rml:logicalSource [
    rml:source "{filename}"  ;
    rml:referenceFormulation ql:JSONPath ;
    rml:iterator "$.hits.hits[*]"
  ];

  rr:subjectMap [
    rr:template "b2share:{id}" ;
    rr:class attx-work:Dataset ;
  ];

  rr:predicateObjectMap [
      rr:predicate attx-work:internal-identifier;
      rr:objectMap [
        rml:reference "id" ;
      ]
    ];

  rr:predicateObjectMap [
      rr:predicate attx-work:identifier;
      rr:objectMap [
  #      rr:parentTriplesMap <b2share:doi-identifiers>
          rr:template "doi:{metadata.DOI}"
      ]
    ];

  rr:predicateObjectMap [
      rr:predicate attx-work:identifier;
      rr:objectMap [
        #rr:parentTriplesMap <b2share:epic-identifiers>
        rr:template "handle:{metadata.ePIC_PID}"
      ]
    ];

  rr:predicateObjectMap [
      rr:predicate attx-work:doi;
      rr:objectMap [
        rml:reference "metadata.DOI" ;
      ]
    ];

  rr:predicateObjectMap [
      rr:predicate attx-work:creator;
      rr:objectMap [
        rr:parentTriplesMap <b2share:creators>
      ]
    ];


  rr:predicateObjectMap [
      rr:predicate attx-work:contributor;
      rr:objectMap [
        rr:parentTriplesMap <b2share:contributors> ;
      ]
    ];

  rr:predicateObjectMap [
      rr:predicate attx-work:title;
      rr:objectMap [
        rml:reference "metadata.titles[*].title"
      ]
    ];

  rr:predicateObjectMap [
      rr:predicate attx-work:description;
      rr:objectMap [
        rml:reference "metadata.descriptions[*].description"
      ]
    ];
  rr:predicateObjectMap [
      rr:predicate attx-work:publisher;
      rr:objectMap [
        rml:reference "metadata.publisher"
      ]
    ];

  rr:predicateObjectMap [
      rr:predicate attx-work:pubdate;
      rr:objectMap [
        rml:reference "metadata.publication_date"
      ]
    ];

  rr:predicateObjectMap [
      rr:predicate attx-work:language;
      rr:objectMap [
        rml:reference "metadata.language"
      ]
    ];

  rr:predicateObjectMap [
      rr:predicate attx-work:resourceType;
      rr:objectMap [
        rr:template "resource-type:{metadata.resource_types[*].resource_type_general}"
      ]
    ];

  rr:predicateObjectMap [
      rr:predicate attx-work:keyword;
      rr:objectMap [
        rml:reference "metadata.keywords[*]" ;
        rr:termType rr:Literal;
      ]
    ];

  rr:predicateObjectMap [
      rr:predicate attx-work:license;
      rr:objectMap [
        rr:template "license:{metadata.license.license}" ;
        rr:termType rr:IRI;
      ]
    ];

.
